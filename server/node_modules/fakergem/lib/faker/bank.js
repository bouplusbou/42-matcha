'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/bank.json');

var Bank = function () {
  function Bank(faker) {
    _classCallCheck(this, Bank);

    this.faker = faker;
  }

  _createClass(Bank, [{
    key: 'name',
    value: function name() {
      return this.faker.Random.element(data['names']);
    }
  }, {
    key: 'swiftBic',
    value: function swiftBic() {
      return this.faker.Random.element(data['swiftBics']);
    }
  }, {
    key: 'iban',
    value: function iban() {
      var _this = this;

      var bankCountryCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GB';

      var details = data['ibanDetails'].find(function (x) {
        return x['bankCountryCode'] == bankCountryCode.toUpperCase();
      });
      var bcc = '' + details['bankCountryCode'] + this.faker.Number.between(10, 99);
      var ilc = [].concat(_toConsumableArray(Array(parseInt(details['ibanLetterCode'])).keys())).map(function (_) {
        return String.fromCharCode(65 + _this.faker.Number.between(0, 25));
      }).join('');
      var ib = [].concat(_toConsumableArray(Array(parseInt(details['ibanDigits'])).keys())).map(function (_) {
        return _this.faker.Number.between(0, 9);
      }).join('');
      return '' + bcc + ilc + ib;
    }
  }]);

  return Bank;
}();

exports.default = Bank;