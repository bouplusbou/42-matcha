'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/vehicle.json');

var VIN_CHARS = '0123456789.ABCDEFGH..JKLMN.P.R..STUVWXYZ';
var VIN_MAP = '0123456789X';
var VIN_WEIGHTS = '8765432X098765432';

function vinChecksum(buffer) {
  return VIN_MAP[buffer.map(function (c, i) {
    return calculateVinWeight(c, i);
  }) % 11];
}

function calculateVinWeight(character, i) {
  VIN_CHARS.indexOf(character) % 10 * VIN_MAP.indexOf(VIN_WEIGHTS[i]);
}

var Vehicle = function () {
  function Vehicle(faker) {
    _classCallCheck(this, Vehicle);

    this.faker = faker;
  }

  _createClass(Vehicle, [{
    key: 'vin',
    value: function vin() {
      var _this = this;

      var details = this.faker.Random.element(data['manufactures'].map(function (x) {
        return { wmi: x[1], wmiExt: x[2] };
      }));
      var vin = [].concat(_toConsumableArray(Array(14).keys())).map(function (_) {
        return _this.faker.Random.element(VIN_CHARS.split('').filter(function (x) {
          return x != '.';
        }));
      }).join('');

      var buffer = ('' + details.wmi + vin).split('');

      if (details.wmiExt) {
        [].concat(_toConsumableArray(Array(2).keys())).map(function (i) {
          buffer[i + 12] = details.wmiExt[i];
        });
      }

      buffer[10] = this.faker.Random.element(data['years']);
      buffer[8] = vinChecksum(buffer);

      return buffer.join('');
    }
  }, {
    key: 'manufacture',
    value: function manufacture() {
      return this.faker.Random.element(data['manufactures'].map(function (x) {
        return x[0];
      }));
    }
  }]);

  return Vehicle;
}();

exports.default = Vehicle;