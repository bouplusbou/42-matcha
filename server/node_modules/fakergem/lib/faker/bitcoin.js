'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _bs = require('bs58');

var _bs2 = _interopRequireDefault(_bs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PROTOCOL_VERSION = {
  main: 0,
  testnet: 111
};

function addressFor(network) {
  var version = PROTOCOL_VERSION[network];
  var packed = String.fromCharCode(version) + _crypto2.default.randomBytes(20);
  var checksum = digest(digest(packed)).slice(0, 3);
  return base58('' + packed + checksum);
}

function digest(text) {
  var hash = _crypto2.default.createHash('sha256');
  return hash.digest(text);
}

function base58(text) {
  return _bs2.default.encode(new Buffer(text, 'ascii'));
}

var Bitcoin = function () {
  function Bitcoin(faker) {
    _classCallCheck(this, Bitcoin);

    this.faker = faker;
  }

  _createClass(Bitcoin, [{
    key: 'address',
    value: function address() {
      return addressFor('main');
    }
  }, {
    key: 'testnetAddress',
    value: function testnetAddress() {
      return addressFor('testnet');
    }
  }]);

  return Bitcoin;
}();

exports.default = Bitcoin;