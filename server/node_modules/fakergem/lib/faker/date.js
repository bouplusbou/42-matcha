'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getDateObject(date) {
  if (typeof date == 'string') {
    return new Date(Date.parse(date));
  }
  date.setHours(0, 0, 0, 0);
  return date;
}

function datesAreEqual(date1, date2) {
  return date1.getYear() === date2.getYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
}

function daysFromNow(n) {
  var d = new Date();
  d.setDate(d.getDate() + n);
  d.setHours(0, 0, 0, 0);
  return d;
}

var DateFaker = function () {
  function DateFaker(faker) {
    _classCallCheck(this, DateFaker);

    this.faker = faker;
  }

  _createClass(DateFaker, [{
    key: 'between',
    value: function between(from, to) {
      from = getDateObject(from);
      to = getDateObject(to);

      var fromMilli = Date.parse(from);
      var toMilli = Date.parse(to);
      var offset = this.faker.Number.between(0, toMilli - fromMilli);
      var date = new Date(fromMilli + offset);
      return getDateObject(date);
    }
  }, {
    key: 'betweenExcept',
    value: function betweenExcept(from, to, except) {
      from = getDateObject(from);
      to = getDateObject(to);
      except = getDateObject(except);

      var date = this.between(from, to);
      while (datesAreEqual(date, except)) {
        date = this.between(from, to);
      }
      return getDateObject(date);
    }
  }, {
    key: 'forward',
    value: function forward() {
      var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 365;

      var from = daysFromNow(1);
      var to = daysFromNow(days);
      var date = this.between(from, to);
      return getDateObject(date);
    }
  }, {
    key: 'backward',
    value: function backward() {
      var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 365;

      var from = daysFromNow(-days);
      var to = daysFromNow(-1);
      var date = this.between(from, to);
      return getDateObject(date);
    }
  }, {
    key: 'birthday',
    value: function birthday() {
      var minAge = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 18;
      var maxAge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 65;

      var from = new Date();
      from.setFullYear(from.getFullYear() - maxAge);
      var to = new Date();
      to.setFullYear(to.getFullYear() - minAge);
      var date = this.between(from, to);
      return getDateObject(date);
    }
  }]);

  return DateFaker;
}();

exports.default = DateFaker;