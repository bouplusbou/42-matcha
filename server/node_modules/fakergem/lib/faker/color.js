'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var data = require('../../data/color.json');

function leftPad(text, length, paddingCharacter) {
  var padding = [].concat(_toConsumableArray(Array(length))).map(function (_) {
    return paddingCharacter;
  }).join('');
  return (padding + text).slice(-length);
}

var Color = function () {
  function Color(faker) {
    _classCallCheck(this, Color);

    this.faker = faker;
  }

  _createClass(Color, [{
    key: 'hexColor',
    value: function hexColor() {
      var n = this.faker.Number.between(0, 0xffffff);
      return '#' + leftPad(n.toString(16), 6, '0');
    }
  }, {
    key: 'colorName',
    value: function colorName() {
      return this.faker.Random.element(data['colorNames']);
    }
  }, {
    key: 'rgbColor',
    value: function rgbColor() {
      var _this = this;

      return [].concat(_toConsumableArray(Array(3).keys())).map(function (_) {
        return _this.faker.Number.between(0, 255);
      });
    }
  }, {
    key: 'hslColor',
    value: function hslColor() {
      return [this.faker.Number.between(0, 360), Math.round(this.faker.Number.betweenF(0.00, 1.00), 2), Math.round(this.faker.Number.betweenF(0.00, 1.00), 2)];
    }
  }, {
    key: 'hslaColor',
    value: function hslaColor() {
      return [this.faker.Number.between(0, 360), Math.round(this.faker.Number.betweenF(0.00, 1.00), 2), Math.round(this.faker.Number.betweenF(0.00, 1.00), 2), this.faker.Number.betweenF(0.00, 1.00)];
    }
  }]);

  return Color;
}();

exports.default = Color;