'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TIME_RANGES;

var _dateHelper = require('../utils/date-helper');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ALL = 'ALL';
var DAY = 'DAY';
var NIGHT = 'NIGHT';
var MORNING = 'MORNING';
var AFTERNOON = 'AFTERNOON';
var EVENING = 'EVENING';
var MIDNIGHT = 'MIDNIGHT';
var BETWEEN = 'BETWEEN';

var TIME_RANGES = (_TIME_RANGES = {}, _defineProperty(_TIME_RANGES, ALL, { start: 0, end: 23 }), _defineProperty(_TIME_RANGES, DAY, { start: 9, end: 17 }), _defineProperty(_TIME_RANGES, NIGHT, { start: 18, end: 23 }), _defineProperty(_TIME_RANGES, MORNING, { start: 6, end: 11 }), _defineProperty(_TIME_RANGES, AFTERNOON, { start: 12, end: 17 }), _defineProperty(_TIME_RANGES, EVENING, { start: 17, end: 21 }), _defineProperty(_TIME_RANGES, MIDNIGHT, { start: 0, end: 4 }), _TIME_RANGES);

function rangeFor(period) {
  var range = TIME_RANGES[period];
  if (!range) {
    throw new Error('invalid period: ' + period);
  }
  return range;
}

function timeWithFormat(time, format) {
  if (!format) return time;
  return (0, _dateHelper.format)(time, format);
}

function daysFromNow(n) {
  var d = new Date();
  d.setDate(d.getDate() + n);
  return d;
}

var Time = function () {
  function Time(faker) {
    _classCallCheck(this, Time);

    this.faker = faker;
  }

  _createClass(Time, [{
    key: 'between',
    value: function between(from, to) {
      var period = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ALL;
      var format = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var date = this.faker.Date.between(from, to);
      var time = period === BETWEEN ? date : new Date(date.getFullYear(), date.getMonth(), date.getDate(), this.faker.Number.between(rangeFor(period).start, rangeFor(period).end), this.faker.Number.between(0, 59), this.faker.Number.between(0, 59));
      return timeWithFormat(time, format);
    }
  }, {
    key: 'forward',
    value: function forward() {
      var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 365;
      var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALL;
      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      var from = daysFromNow(1);
      var to = daysFromNow(days);
      var date = this.faker.Date.between(from, to);
      var range = rangeFor(period);
      var time = new Date(date.getFullYear(), date.getMonth(), date.getDate(), this.faker.Number.between(range.start, range.end), this.faker.Number.between(0, 59), this.faker.Number.between(0, 59));
      return timeWithFormat(time, format);
    }
  }, {
    key: 'backward',
    value: function backward() {
      var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 365;
      var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALL;
      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      var from = daysFromNow(-days);
      var to = daysFromNow(-1);
      var date = this.faker.Date.between(from, to);
      var range = rangeFor(period);
      var time = new Date(date.getFullYear(), date.getMonth(), date.getDate(), this.faker.Number.between(range.start, range.end), this.faker.Number.between(0, 59), this.faker.Number.between(0, 59));
      return timeWithFormat(time, format);
    }
  }, {
    key: 'ALL',
    get: function get() {
      return ALL;
    }
  }, {
    key: 'DAY',
    get: function get() {
      return DAY;
    }
  }, {
    key: 'NIGHT',
    get: function get() {
      return NIGHT;
    }
  }, {
    key: 'MORNING',
    get: function get() {
      return MORNING;
    }
  }, {
    key: 'AFTERNOON',
    get: function get() {
      return AFTERNOON;
    }
  }, {
    key: 'EVENING',
    get: function get() {
      return EVENING;
    }
  }, {
    key: 'MIDNIGHT',
    get: function get() {
      return MIDNIGHT;
    }
  }, {
    key: 'BETWEEN',
    get: function get() {
      return BETWEEN;
    }
  }]);

  return Time;
}();

exports.default = Time;