'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/phone-number.json');

var PhoneNumber = function () {
  function PhoneNumber(faker) {
    _classCallCheck(this, PhoneNumber);

    this.faker = faker;
  }

  _createClass(PhoneNumber, [{
    key: 'phoneNumber',
    value: function phoneNumber() {
      var _this = this;

      var format = this.faker.Random.element(data['phoneNumber']['formats']);
      return format.replace(/#/g, function (_) {
        return _this.faker.Number.between(0, 9);
      });
    }
  }, {
    key: 'cellPhone',
    value: function cellPhone() {
      var _this2 = this;

      var format = this.faker.Random.element(data['cellPhone']['formats']);
      return format.replace(/#/g, function (_) {
        return _this2.faker.Number.between(0, 9);
      });
    }
  }, {
    key: 'areaCode',
    value: function areaCode() {
      return this.faker.Random.element(data['areaCodes']);
    }
  }, {
    key: 'exchangeCode',
    value: function exchangeCode() {
      return this.faker.Random.element(data['exchangeCodes']);
    }
  }, {
    key: 'subscriberNumber',
    value: function subscriberNumber() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;

      var min = Math.pow(10, length) / 10;
      var max = min * 10 - 1;
      return '' + this.faker.Number.between(min, max);
    }
  }, {
    key: 'extension',
    value: function extension() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;

      return this.subscriberNumber(length);
    }
  }]);

  return PhoneNumber;
}();

exports.default = PhoneNumber;