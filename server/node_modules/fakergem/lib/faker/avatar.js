'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SUPPORTED_FORMATS = ['png', 'jpg', 'bmp'];

function isValidSize(size) {
  return (/^\d+x\d+$/.test(size)
  );
}

function isFormatSupported(format) {
  return SUPPORTED_FORMATS.indexOf(format) >= 0;
}

function words(faker) {
  return faker.Lorem.words(3).join('-');
}

var Avatar = function () {
  function Avatar(faker) {
    _classCallCheck(this, Avatar);

    this.faker = faker;
  }

  _createClass(Avatar, [{
    key: 'image',
    value: function image() {
      var slug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '300x300';
      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'png';
      var set = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'set1';
      var bgset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

      if (!isValidSize(size)) {
        throw new Error('Size should be specified in format 300x300');
      }
      if (!isFormatSupported(format)) {
        throw new Error('Supported formats are ' + SUPPORTED_FORMATS.join(', '));
      }
      var filename = (slug || words(this.faker)) + '.' + format;
      var bgsetQuery = bgset ? '&bgset=' + bgset : '';

      return 'https://robohash.org/' + filename + '?size=' + size + '&set=' + set + bgsetQuery;
    }
  }]);

  return Avatar;
}();

exports.default = Avatar;