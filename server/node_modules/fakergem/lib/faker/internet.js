'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _shuffle = require('../utils/shuffle');

var _shuffle2 = _interopRequireDefault(_shuffle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var data = require('../../data/internet.json');

// 0-9, a-z
var CHARACTERS = [].concat(_toConsumableArray(Array(10).keys())).concat([].concat(_toConsumableArray(Array(26).keys())).map(function (i) {
  return String.fromCharCode(97 + i);
}));
var SYMBOLS = ['!', '@', '#', '$', '%', '^', '&', '*'];
var PRIVATE_NET_REGEX = [/^10\./, // 10.0.0.0    – 10.255.255.255
/^100\.(6[4-9]|[7-9]\d|1[0-1]\d|12[0-7])\./, // 100.64.0.0  – 100.127.255.255
/^127\./, // 127.0.0.0   – 127.255.255.255
/^169\.254\./, // 169.254.0.0 – 169.254.255.255
/^172\.(1[6-9]|2\d|3[0-1])\./, // 172.16.0.0  – 172.31.255.255
/^192\.0\.0\./, // 192.0.0.0   – 192.0.0.255
/^192\.168\./, // 192.168.0.0 – 192.168.255.255
/^198\.(1[8-9])\./ // 198.18.0.0  – 198.19.255.255
];
var RESERVED_NETS_REGEX = [/^0\./, // 0.0.0.0      – 0.255.255.255
/^192\.0\.2\./, // 192.0.2.0    – 192.0.2.255
/^192\.88\.99\./, // 192.88.99.0  – 192.88.99.255
/^198\.51\.100\./, // 198.51.100.0 – 198.51.100.255
/^203\.0\.113\./, // 203.0.113.0  – 203.0.113.255
/^(22[4-9]|23\d)\./, // 224.0.0.0    – 239.255.255.255
/^(24\d|25[0-5])\./ // 240.0.0.0    – 255.255.255.254  and  255.255.255.255
];

function privateNetChecker(addr) {
  return PRIVATE_NET_REGEX.some(function (x) {
    return addr.match(x);
  });
}

function reservedNetChecker(addr) {
  return [].concat(PRIVATE_NET_REGEX, RESERVED_NETS_REGEX).some(function (x) {
    return addr.match(x);
  });
}

var Internet = function () {
  function Internet(faker) {
    _classCallCheck(this, Internet);

    this.faker = faker;
  }

  _createClass(Internet, [{
    key: 'email',
    value: function email(name) {
      return [this.userName(name), this.domainName()].join('@');
    }
  }, {
    key: 'freeEmail',
    value: function freeEmail(name) {
      return [this.userName(name), this.faker.Random.element(data['freeEmails'])].join('@');
    }
  }, {
    key: 'safeEmail',
    value: function safeEmail(name) {
      return [this.userName(name), 'example.' + this.faker.Random.element(['org', 'com', 'net'])].join('@');
    }
  }, {
    key: 'userName',
    value: function userName() {
      var specifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var separators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var userNameSeparator = this.faker.Random.element(separators || ['.', '_']);
      if (typeof specifier === 'string') {
        var specifiers = specifier.match(/\w+/g).map(function (x) {
          return x;
        });
        return this.faker.Random.assortment(specifiers, specifiers.length).join(userNameSeparator).toLowerCase();
      }
      var firstName = this.faker.Name.firstName();
      var lastName = this.faker.Name.lastName();
      return this.faker.Random.element([firstName, [firstName, lastName].join(userNameSeparator)]).toLowerCase();
    }
  }, {
    key: 'password',
    value: function password() {
      var minLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
      var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;

      var _this = this;

      var mixCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var specialChars = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var diffLength = maxLength - minLength;
      var extraCharacters = this.faker.Number.between(0, diffLength);
      var chars = specialChars ? [].concat(_toConsumableArray(CHARACTERS), SYMBOLS) : CHARACTERS;
      return [].concat(_toConsumableArray(Array(minLength + extraCharacters).keys())).reduce(function (result, val, index) {
        var c = _this.faker.Random.element(chars).toString();
        return result + (mixCase && index % 2 == 0 ? c.toUpperCase() : c);
      }, '');
    }
  }, {
    key: 'domainName',
    value: function domainName() {
      return [this.domainWord(), this.domainSuffix()].join('.');
    }
  }, {
    key: 'fixUmlauts',
    value: function fixUmlauts(value) {
      return (value || '').replace(/ä/g, 'ae').replace(/ö/g, 'oe').replace(/ü/g, 'ue');
    }
  }, {
    key: 'domainWord',
    value: function domainWord() {
      return this.faker.Name.lastName();
    }
  }, {
    key: 'domainSuffix',
    value: function domainSuffix() {
      return this.faker.Random.element(data['domainSuffixes']);
    }
  }, {
    key: 'ipV4Address',
    value: function ipV4Address() {
      return [this.faker.Number.between(2, 254), this.faker.Number.between(2, 254), this.faker.Number.between(2, 254), this.faker.Number.between(2, 254)].join('.');
    }
  }, {
    key: 'privateIPV4Address',
    value: function privateIPV4Address() {
      var addr = void 0;
      do {
        addr = this.ipV4Address();
      } while (!privateNetChecker(addr));
      return addr;
    }
  }, {
    key: 'publicIPV4Address',
    value: function publicIPV4Address() {
      var addr = void 0;
      do {
        addr = this.ipV4Address();
      } while (reservedNetChecker(addr));
      return addr;
    }
  }, {
    key: 'ipV4CIDR',
    value: function ipV4CIDR() {
      return this.ipV4Address() + '/' + this.faker.Number.between(1, 32);
    }
  }, {
    key: 'ipV6Address',
    value: function ipV6Address() {
      var _this2 = this;

      return [].concat(_toConsumableArray(Array(8).keys())).map(function (_) {
        return _this2.faker.Number.between(4096, 65535).toString(16);
      }).join(':');
    }
  }, {
    key: 'ipV6CIDR',
    value: function ipV6CIDR() {
      return this.ipV6Address() + '/' + this.faker.Number.between(1, 128);
    }
  }, {
    key: 'macAddress',
    value: function macAddress() {
      var _this3 = this;

      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var prefixDigits = prefix.split(':').filter(function (x) {
        return x;
      }).map(function (x) {
        return parseInt(x, 16);
      });
      var addressDigits = [].concat(_toConsumableArray(Array(6 - prefixDigits.length).keys())).map(function (x) {
        return _this3.faker.Number.between(0, 255);
      });
      return [].concat(_toConsumableArray(prefixDigits), _toConsumableArray(addressDigits)).map(function (x) {
        return x.toString(16);
      }).join(':');
    }
  }, {
    key: 'url',
    value: function url() {
      var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var scheme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'http';

      host = host || this.domainName();
      path = path || '/' + this.userName();
      return scheme + '://' + host + path;
    }
  }, {
    key: 'slug',
    value: function slug() {
      var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var glue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return (words || this.faker.Lorem.words(2).join(' ')).replace(/\s+/g, glue || this.faker.Random.element(['-', '_', '.'])).toLowerCase();
    }
  }]);

  return Internet;
}();

exports.default = Internet;