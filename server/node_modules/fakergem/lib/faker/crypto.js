'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CHARACTERS = '0123456789abcdefghijklmnopqrstuvwxyz';

var Crypto = function () {
  function Crypto(faker) {
    _classCallCheck(this, Crypto);

    this.faker = faker;
  }

  _createClass(Crypto, [{
    key: 'md5',
    value: function md5() {
      var hash = _crypto2.default.createHash('md5');
      var array = CHARACTERS.split('');
      var characters = this.faker.Random.assortment(array, 255).join('');
      hash.update(characters);
      return hash.digest('hex');
    }
  }, {
    key: 'sha1',
    value: function sha1() {
      var hash = _crypto2.default.createHash('sha1');
      var array = CHARACTERS.split('');
      var characters = this.faker.Random.assortment(array, 255).join('');
      hash.update(characters);
      return hash.digest('hex');
    }
  }, {
    key: 'sha256',
    value: function sha256() {
      var hash = _crypto2.default.createHash('sha256');
      var array = CHARACTERS.split('');
      var characters = this.faker.Random.assortment(array, 255).join('');
      hash.update(characters);
      return hash.digest('hex');
    }
  }]);

  return Crypto;
}();

exports.default = Crypto;