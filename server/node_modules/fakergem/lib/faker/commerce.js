'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/commerce.json');

function buildCategories(faker, num) {
  var categories = [];
  while (categories.length < num) {
    var category = faker.Random.element(data['departments']);
    if (categories.indexOf(category) < 0) {
      categories.push(category);
    }
  }
  return categories;
}

function mergeCategories(categories) {
  var separator = ' & ';
  var commaSeparated = categories.slice(0, -1).join(', ');
  var lastCategory = categories.slice(-1);
  return [commaSeparated, lastCategory].join(separator);
}

var Commerce = function () {
  function Commerce(faker) {
    _classCallCheck(this, Commerce);

    this.faker = faker;
  }

  _createClass(Commerce, [{
    key: 'color',
    value: function color() {
      return this.faker.Color.colorName();
    }
  }, {
    key: 'department',
    value: function department() {
      var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
      var fixedAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var num = fixedAmount ? max : this.faker.Number.between(1, max);
      var categories = buildCategories(this.faker, num);
      return num > 1 ? mergeCategories(categories) : categories[0];
    }
  }, {
    key: 'productName',
    value: function productName() {
      return [this.faker.Random.element(data['productNames']['adjective']), this.faker.Random.element(data['productNames']['material']), this.faker.Random.element(data['productNames']['product'])].join(' ');
    }
  }, {
    key: 'price',
    value: function price() {
      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { min: 0.00, max: 100.00 };

      var n = this.faker.Number.between(range.min, range.max);
      return (Math.floor(n * 100) / 100.0).toFixed(2);
    }
  }, {
    key: 'promotionCode',
    value: function promotionCode() {
      var digits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;

      return [this.faker.Random.element(data['promotionCodes']['adjective']), this.faker.Random.element(data['promotionCodes']['noun']), this.faker.Number.number(digits)].join('');
    }
  }]);

  return Commerce;
}();

exports.default = Commerce;