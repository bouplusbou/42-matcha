'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _random = require('../utils/random');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function nonZeroDigit() {
  return (0, _random.randomNumber)(1, 9);
}

function decimalPart(digits) {
  var num = '';
  if (digits > 1) {
    num = '' + nonZeroDigit();
    digits -= 1;
  }
  return leadingZeroNumber(digits) + num;
}

function leadingZeroNumber(digits) {
  return [].concat(_toConsumableArray(Array(digits).keys())).map(function (_) {
    return (0, _random.randomNumber)(0, 9);
  }).join('');
}

var Number = function () {
  function Number(faker) {
    _classCallCheck(this, Number);

    this.faker = faker;
  }

  _createClass(Number, [{
    key: 'number',
    value: function number() {
      var digits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

      var num = '';
      if (digits > 1) {
        num = '' + nonZeroDigit();
        digits -= 1;
      }
      return num + leadingZeroNumber(digits);
    }
  }, {
    key: 'decimal',
    value: function decimal() {
      var leftDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
      var rightDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

      return this.number(leftDigits) + '.' + decimalPart(rightDigits);
    }
  }, {
    key: 'normal',
    value: function normal() {
      var mean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var standardDeviation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      var theta = 2 * Math.PI * Math.random();
      var rho = Math.sqrt(-2 * Math.log(1 - Math.random()));
      var scale = standardDeviation * rho;
      return mean + scale * Math.cos(theta);
    }
  }, {
    key: 'hexadecimal',
    value: function hexadecimal() {
      var digits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;

      return [].concat(_toConsumableArray(Array(digits).keys())).map(function (_) {
        return (0, _random.randomNumber)(0, 15).toString(16);
      }).join('');
    }
  }, {
    key: 'between',
    value: function between() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;

      var min = Math.min(from, to);
      var max = Math.max(from, to);
      return (0, _random.randomNumber)(min, max);
    }
  }, {
    key: 'betweenF',
    value: function betweenF() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.00;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000.00;

      var min = Math.min(from, to);
      var max = Math.max(from, to);
      return (0, _random.randomFloat)(min, max);
    }
  }, {
    key: 'positive',
    value: function positive() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.00;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000.00;

      var value = this.between(from, to);
      return value < 0 ? value *= -1 : value;
    }
  }, {
    key: 'negative',
    value: function negative() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1.00;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -5000.00;

      var value = this.between(from, to);
      return value < 0 ? value : value *= -1;
    }
  }, {
    key: 'digit',
    value: function digit() {
      return (0, _random.randomNumber)(0, 9);
    }
  }]);

  return Number;
}();

exports.default = Number;