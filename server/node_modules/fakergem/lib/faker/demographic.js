'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/demographic.json');

var Demographic = function () {
  function Demographic(faker) {
    _classCallCheck(this, Demographic);

    this.faker = faker;
  }

  _createClass(Demographic, [{
    key: 'race',
    value: function race() {
      return this.faker.Random.element(data['races']);
    }
  }, {
    key: 'educationalAttainment',
    value: function educationalAttainment() {
      return this.faker.Random.element(data['educationalAttainments']);
    }
  }, {
    key: 'demonym',
    value: function demonym() {
      return this.faker.Random.element(data['demonyms']);
    }
  }, {
    key: 'maritalStatus',
    value: function maritalStatus() {
      return this.faker.Random.element(data['maritalStatuses']);
    }
  }, {
    key: 'sex',
    value: function sex() {
      return this.faker.Random.element(data['sexes']);
    }
  }, {
    key: 'height',
    value: function height() {
      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'metric';

      switch (unit) {
        case 'metric':
          return '' + this.faker.Number.betweenF(1.45, 2.13).toFixed(2);
        case 'imperial':
          var inches = this.faker.Number.between(57, 86);
          return Math.floor(inches / 12) + ' ft, ' + inches % 12 + ' in';
      }
    }
  }]);

  return Demographic;
}();

exports.default = Demographic;