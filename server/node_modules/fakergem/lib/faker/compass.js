'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/compass.json');

function parse(faker, format) {
  var text = format.replace(/\{(\w+)\}/g, function (m) {
    return '{Compass.' + m.substring(1);
  });
  return faker.Fake.f(text);
}

var Compass = function () {
  function Compass(faker) {
    _classCallCheck(this, Compass);

    this.faker = faker;
  }

  _createClass(Compass, [{
    key: 'direction',
    value: function direction() {
      return parse(this.faker, this.faker.Random.element(data['directions']));
    }
  }, {
    key: 'cardinal',
    value: function cardinal() {
      return this.faker.Random.element(data['cardinals']['word']);
    }
  }, {
    key: 'ordinal',
    value: function ordinal() {
      return this.faker.Random.element(data['ordinals']['word']);
    }
  }, {
    key: 'halfWind',
    value: function halfWind() {
      return this.faker.Random.element(data['halfWinds']['word']);
    }
  }, {
    key: 'quarterWind',
    value: function quarterWind() {
      return this.faker.Random.element(data['quarterWinds']['word']);
    }
  }, {
    key: 'abbreviation',
    value: function abbreviation() {
      return parse(this.faker, this.faker.Random.element(data['abbreviations']));
    }
  }, {
    key: 'cardinalAbbreviation',
    value: function cardinalAbbreviation() {
      return this.faker.Random.element(data['cardinals']['abbreviation']);
    }
  }, {
    key: 'ordinalAbbreviation',
    value: function ordinalAbbreviation() {
      return this.faker.Random.element(data['ordinals']['abbreviation']);
    }
  }, {
    key: 'halfWindAbbreviation',
    value: function halfWindAbbreviation() {
      return this.faker.Random.element(data['halfWinds']['abbreviation']);
    }
  }, {
    key: 'quarterWindAbbreviation',
    value: function quarterWindAbbreviation() {
      return this.faker.Random.element(data['quarterWinds']['abbreviation']);
    }
  }, {
    key: 'azimuth',
    value: function azimuth() {
      return parse(this.faker, this.faker.Random.element(data['azimuths']));
    }
  }, {
    key: 'cardinalAzimuth',
    value: function cardinalAzimuth() {
      return this.faker.Random.element(data['cardinals']['azimuth']);
    }
  }, {
    key: 'ordinalAzimuth',
    value: function ordinalAzimuth() {
      return this.faker.Random.element(data['ordinals']['azimuth']);
    }
  }, {
    key: 'halfWindAzimuth',
    value: function halfWindAzimuth() {
      return this.faker.Random.element(data['halfWinds']['azimuth']);
    }
  }, {
    key: 'quarterWindAzimuth',
    value: function quarterWindAzimuth() {
      return this.faker.Random.element(data['quarterWinds']['azimuth']);
    }
  }]);

  return Compass;
}();

exports.default = Compass;