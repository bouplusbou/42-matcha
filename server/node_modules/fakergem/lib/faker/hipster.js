'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/hipster.json');
var loremData = require('../../data/lorem.json');

function resolveNumber(n) {
  return Math.max(parseInt(n), 0);
}

function capitalize(text) {
  return text.replace(/\b\w/, function (x) {
    return x.toUpperCase();
  });
}

var Hipster = function () {
  function Hipster(faker) {
    _classCallCheck(this, Hipster);

    this.faker = faker;
  }

  _createClass(Hipster, [{
    key: 'word',
    value: function word() {
      var item = this.faker.Random.element(data['words']);
      return item.match(/\s/) ? this.word() : item; // Make sure we get a single word
    }
  }, {
    key: 'words',
    value: function words() {
      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;

      var _this = this;

      var supplemental = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var spacesAllowed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var wordList = supplemental ? [].concat(_toConsumableArray(data['words']), [loremData['words']]) : data['words'];
      var words = this.faker.Random.assortment(wordList, resolveNumber(num));
      return spacesAllowed ? words : words.map(function (x) {
        return ('' + x).match(/\s/) ? _this.word() : x;
      });
    }
  }, {
    key: 'sentence',
    value: function sentence() {
      var wordCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;
      var supplemental = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var randomWordsToAdd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;

      var words = this.words(resolveNumber(wordCount) + this.faker.Number.between(0, randomWordsToAdd), supplemental, true);
      var text = capitalize(words.join(' '));
      return text.length > 0 ? text + '.' : text;
    }
  }, {
    key: 'sentences',
    value: function sentences() {
      var _this2 = this;

      var sentenceCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
      var supplemental = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      return [].concat(_toConsumableArray(Array(resolveNumber(sentenceCount)).keys())).map(function (_) {
        return _this2.sentence(3, supplemental);
      });
    }
  }, {
    key: 'paragraph',
    value: function paragraph() {
      var sentenceCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
      var supplemental = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var randomSentencesToAdd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;

      return this.sentences(resolveNumber(sentenceCount) + this.faker.Number.between(0, randomSentencesToAdd), supplemental).join(' ');
    }
  }, {
    key: 'paragraphs',
    value: function paragraphs() {
      var _this3 = this;

      var paragraphCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
      var supplemental = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      return [].concat(_toConsumableArray(Array(resolveNumber(paragraphCount)).keys())).map(function (_) {
        return _this3.paragraph(3, supplemental);
      });
    }
  }]);

  return Hipster;
}();

exports.default = Hipster;