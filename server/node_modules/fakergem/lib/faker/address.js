'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/address.json');

function parse(faker, format) {
  var text = format.replace(/\{(\w+)\}/g, function (m) {
    return '{Address.' + m.substring(1);
  }).replace(/#/, faker.Number.between(1, 9));
  return faker.Fake.f(text);
}

var Address = function () {
  function Address(faker) {
    _classCallCheck(this, Address);

    this.faker = faker;
  }

  _createClass(Address, [{
    key: 'city',
    value: function city() {
      var format = this.faker.Random.element(data['cities']);
      return parse(this.faker, format);
    }
  }, {
    key: 'streetName',
    value: function streetName() {
      var format = this.faker.Random.element(data['streetNames']);
      return parse(this.faker, format);
    }
  }, {
    key: 'streetAddress',
    value: function streetAddress() {
      var format = this.faker.Random.element(data['streetAddresses']);
      return parse(this.faker, format);
    }
  }, {
    key: 'secondaryAddress',
    value: function secondaryAddress() {
      var prefix = this.faker.Random.element(data['secondaryAddressPrefixes']);
      var format = prefix + ' ###';
      return parse(this.faker, format);
    }
  }, {
    key: 'buildingNumber',
    value: function buildingNumber() {
      return '' + this.faker.Number.between(100, 99999);
    }
  }, {
    key: 'zipCode',
    value: function zipCode() {
      var stateAbbreviation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var format = stateAbbreviation == '' ? this.faker.Random.element(data['postcodes']) : data['postcodeByState'][stateAbbreviation];
      return parse(this.faker, format);
    }
  }, {
    key: 'zip',
    value: function zip() {
      var stateAbbreviation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      return this.zipCode(stateAbbreviation);
    }
  }, {
    key: 'postcode',
    value: function postcode() {
      var stateAbbreviation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      return this.zipCode(stateAbbreviation);
    }
  }, {
    key: 'timeZone',
    value: function timeZone() {
      return this.faker.Random.element(data['timeZones']);
    }
  }, {
    key: 'streetSuffix',
    value: function streetSuffix() {
      return this.faker.Random.element(data['streetSuffixes']);
    }
  }, {
    key: 'citySuffix',
    value: function citySuffix() {
      return this.faker.Random.element(data['citySuffixes']);
    }
  }, {
    key: 'cityPrefix',
    value: function cityPrefix() {
      return this.faker.Random.element(data['cityPrefixes']);
    }
  }, {
    key: 'state',
    value: function state() {
      return this.faker.Random.element(data['states']);
    }
  }, {
    key: 'stateAbbr',
    value: function stateAbbr() {
      return this.faker.Random.element(data['stateAbbreviations']);
    }
  }, {
    key: 'country',
    value: function country() {
      return this.faker.Random.element(data['countries']);
    }
  }, {
    key: 'countryCode',
    value: function countryCode() {
      return this.faker.Random.element(data['countryCodes']);
    }
  }, {
    key: 'latitude',
    value: function latitude() {
      return '' + (this.faker.Number.betweenF(0.00, 180.00) - 90);
    }
  }, {
    key: 'longitude',
    value: function longitude() {
      return '' + (this.faker.Number.betweenF(0.00, 360.00) - 180);
    }
  }]);

  return Address;
}();

exports.default = Address;