'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var data = require('../../data/company.json');

function parse(faker, format) {
  var text = format.replace(/\{(\w+)\}/g, function (m) {
    return '{Company.' + m.substring(1);
  });
  return faker.Fake.f(text);
}

function luhnAlgorithm(number) {
  var sum = 0;
  ('' + number).split('').map(function (x, i) {
    return i % 2 == 0 ? parseInt(x) * 2 : parseInt(x);
  }).forEach(function (n) {
    return ('' + n).split('').forEach(function (c) {
      return sum += c.charCodeAt(0);
    });
  });
  return sum % 10 == 0 ? 0 : (sum / 10 + 1) * 10 - sum;
}

function mod11(number) {
  var weight = [2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7];
  var sum = ('' + number).split('').reverse().reduce(function (acc, val, index) {
    return val.charCodeAt(0) * weight[index - 1];
  });
  var remainder = sum % 11;

  return 11 - remainder;
}

function abnChecksum(abn) {
  var weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19];

  return weights.reduce(function (acc, val, index) {
    return acc + val * abn[index - 1];
  });
}

function leftPad(text, length, paddingCharacter) {
  var padding = [].concat(_toConsumableArray(Array(length))).map(function (_) {
    return paddingCharacter;
  }).join('');
  return (padding + text).slice(-length);
}

var Company = function () {
  function Company(faker) {
    _classCallCheck(this, Company);

    this.faker = faker;
  }

  _createClass(Company, [{
    key: 'name',
    value: function name() {
      return parse(this.faker, this.faker.Random.element(data['names']));
    }
  }, {
    key: 'suffix',
    value: function suffix() {
      return this.faker.Random.element(data['suffixes']);
    }
  }, {
    key: 'catchPhrase',
    value: function catchPhrase() {
      var _this = this;

      return [].concat(_toConsumableArray(Array(3).keys())).map(function (i) {
        return _this.faker.Random.element(data['buzzwords'][i]);
      }).join(' ');
    }
  }, {
    key: 'buzzword',
    value: function buzzword() {
      return this.faker.Random.element([].concat(_toConsumableArray(data['buzzwords'][0]), _toConsumableArray(data['buzzwords'][1]), _toConsumableArray(data['buzzwords'][2])));
    }
  }, {
    key: 'bs',
    value: function bs() {
      var _this2 = this;

      return [].concat(_toConsumableArray(Array(3).keys())).map(function (i) {
        return _this2.faker.Random.element(data['bs'][i]);
      }).join(' ');
    }
  }, {
    key: 'ein',
    value: function ein() {
      var _this3 = this;

      return [].concat(_toConsumableArray(Array(9).keys())).map(function (_) {
        return _this3.faker.Number.between(0, 9);
      }).join('').replace(/(\d{2})(\d{7})/, '$1-$2');
    }
  }, {
    key: 'dunsNumber',
    value: function dunsNumber() {
      var _this4 = this;

      return [].concat(_toConsumableArray(Array(9).keys())).map(function (_) {
        return _this4.faker.Number.between(0, 9);
      }).join('').replace(/(\d{2})(\d{3})(\d{4})/, '$1-$2-$3');
    }
  }, {
    key: 'logo',
    value: function logo() {
      var number = this.faker.Number.between(1, 14);
      return 'https://pigment.github.io/fake-logos/logos/medium/color/' + number + '.png';
    }
  }, {
    key: 'swedishOrganisationNumber',
    value: function swedishOrganisationNumber() {
      var base = [this.faker.Number.between(1, 9), this.faker.Number.between(0, 9), this.faker.Number.between(2, 9), this.faker.Number.number(6)].join('');
      return '' + base + luhnAlgorithm(base);
    }
  }, {
    key: 'norwegianOrganisationNumber',
    value: function norwegianOrganisationNumber() {
      var mod11Check = null;
      var base = '';
      while (mod11Check == null) {
        base = [this.faker.Random.element([8, 9]), leftPad(this.faker.Number.between(0, 10000000), 7, '0')].join('');
        mod11Check = mod11(base);
      }
      return '' + base + mod11Check;
    }
  }, {
    key: 'australianBusinessNumber',
    value: function australianBusinessNumber() {
      var base = leftPad(this.faker.Number.between(0, 1000000000), 9, '0');
      var abn = '00' + base;
      return '' + (99 - abnChecksum(abn) % 89) + base;
    }
  }, {
    key: 'profession',
    value: function profession() {
      return this.faker.Random.element(data['professions']);
    }
  }]);

  return Company;
}();

exports.default = Company;