'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var data = require('../../data/coffee.json');

function parse(faker, format) {
  return format.replace(/\{intensifier\}/g, faker.Random.element(data['intensifiers'])).replace(/\{body\}/g, faker.Random.element(data['bodies'])).replace(/\{descriptor\}/g, faker.Random.element(data['descriptors'])).replace(/\{name1\}/g, faker.Random.element(data['name1'])).replace(/\{name2\}/g, faker.Random.element(data['name2']));
}

var Coffee = function () {
  function Coffee(faker) {
    _classCallCheck(this, Coffee);

    this.faker = faker;
  }

  _createClass(Coffee, [{
    key: 'blendName',
    value: function blendName() {
      var blendName = this.faker.Random.element(data['blendNames']);
      return parse(this.faker, blendName);
    }
  }, {
    key: 'origin',
    value: function origin() {
      var country = this.faker.Random.element(data['countries']);
      var key = country.replace(/\s/, '_').toLowerCase();
      var region = this.faker.Random.element(data['regions'][key]);
      return region + ', ' + country;
    }
  }, {
    key: 'variety',
    value: function variety() {
      return this.faker.Random.element(data['varieties']);
    }
  }, {
    key: 'notes',
    value: function notes() {
      var notes = this.faker.Random.element(data['notes']);
      return parse(this.faker, notes);
    }
  }]);

  return Coffee;
}();

exports.default = Coffee;